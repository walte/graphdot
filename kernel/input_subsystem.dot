/*
node
color: naveblue, skyblue, red, red4, crimson, forestgreen, limegreen
style: solid, dotted, dashed, bold, rounded, filled
shape: box, polygon, ellipse, plaintext
*/

/*
edge
color: naveblue, skyblue, red, red4, crimson, forestgreen, limegreen
style: solid, dotted, dashed, bold
*/

/*
rankdir: TB BT LR RL
*/

/*
digraph example{
	fontname = "Verdana";
	fontsize = 10;
	rankdir=TB;

	node [fontname = "Verdana", fontsize = 10, color="skyblue", shape="record"];
	edge [fontname = "Verdana", fontsize = 10, color="crimson", style="solid"];

	st_hash_type [label="{<head>st_hash_type|(*compare)|(*hash)}"];
	st_table_entry [label="{<head>st_table_entry|hash|key|record|<next>next}"];
	st_table [label="{st_table|<type>type|num_bins|num_entries|<bins>bins}"];

	st_table:bins -> st_table_entry:head;
	st_table:type -> st_hash_type:head;
	st_table_entry:next -> st_table_entry:head [style="dashed", color="forestgreen"];
}
*/

digraph input_subsystem{
	fontname = "Verdana";
	fontsize = 10;
	rankdir=TB;

	node [fontname = "Verdana", fontsize = 10, color="skyblue", shape="record"];
	edge [fontname = "Verdana", fontsize = 10, color="crimson", style="solid"];

	{rank=same;input_devA input_devB}
	{rank=same;input_handlerA input_handlerB}
	input_dev_list[style="dashed"]
	input_devA[label="{<head>input_dev|<s_node>node|<h_list>h_list}"];
	input_devB[label="{<head>input_dev|<s_node>node|<h_list>h_list}"];
	input_handle [label="{<head>input_handle|||<d_node>d_node|<s_dev>dev|<s_handler>handler|<h_node>h_node}"];
	input_handlerA [label="{<head>input_handler||||<h_list>h_list}"];
	input_handlerB [label="{<head>input_handler||||<h_list>hlist}"];
	input_handler_list[style="dashed"]

	input_dev_list->input_devA:s_node[dir="both"]
	input_dev_list->input_devB:s_node[dir="both"]
	//input_devA:s_node->input_devB:s_node[dir="both", style="dotted", constraint=false]
	input_devA:h_list->input_handle:d_node[dir="both", style="dashed"]
	input_handle:s_dev->input_devA:head
	input_handle:s_handler->input_handlerA:head
	input_handlerA:h_list->input_handle:h_node[dir="both", style="dashed"]
	input_handler_list->input_handlerA:head
	input_handler_list->input_handlerB

	//{rank=same; input_dev_list input_handler_list}
	//{rank=same; input_devA input_devB}
	//{rank=same; input_handlerA:head input_handlerB:head}

}
