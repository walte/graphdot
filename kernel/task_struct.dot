/*
node
color: naveblue, skyblue, red, red4, crimson, forestgreen, limegreen
style: solid, dotted, dashed, bold, rounded, filled
shape: box, polygon, ellipse, plaintext
*/

/*
edge
color: naveblue, skyblue, red, red4, crimson, forestgreen, limegreen
style: solid, dotted, dashed, bold
*/

/*
rankdir: TB BT LR RL
*/

digraph task{
	fontname = "Verdana";
	fontsize = 10;
	rankdir=TB;

	node [fontname = "Verdana", fontsize = 10, color="skyblue", shape="record", ALIGN="LEFT"];
	edge [fontname = "Verdana", fontsize = 10, color="crimson", style="solid"];

	thread_info[label="{<head>struct thread_info\
|unsigned long flags\l\
|int preempt_count\l(0 preemptable, \<0  bug)\l\
|mm_segment_t addr_limit\l\
|<s_task_struct>struct task_struct* task\l\
|struct exec_domain *exec_domain\l\
__u32 cpu\l\
__u32 cpu_domain\l\
|<s_cpu_context>struct cpu_context_save cpu_context\l\
|..}"];

	task_struct[label="{<head>struct task_struct\
|<s_state>volatile long state\l\
|<s_stack>void *stack\l\
|unsigned int flags\l\
|..\
|int prio, static_prio, normal_prio\l\
unsigned int rt_priority\l\
const struct sched_class *sched_class\l\
struct sched_entity se\l\
struct sched_rt_entity rt\l\
|..\
|<s_tasks>struct list_head tasks\l\
|struct mm_struct *mm, *active_mm\l\
|..\
|pid_t pid\l\
pid_t tgid\l\
|..\
|<s_task_tree>struct task_struct *real_parent\l\
struct task_struct *parent\l\
struct list_head children\l\
struct list_head sibling\l\
struct task_struct *group_leader\l\
|<s_thread_group>struct pid_link pids[PIDTYPE_MAX]\l\
struct list_head thread_group\l\
|..}"];

	thread_info:s_task_struct->task_struct:head; /*current_thread_info()->task, for_each_process(p)*/
	task_struct:s_stack->thread_info:head;

	task_struct:s_tasks->"list_add_tail_rcu(&p->tasks, &init_task.tasks)\n(copy_process())"[dir="both"]
	task_struct:s_thread_group->"list_add_tail_rcu(&p->thread_group, &p->group_leader->thread_group)\n(copy_process())"[dir="both"]
}
